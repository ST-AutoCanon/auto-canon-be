# worker_processes 1;

# events {
#   worker_connections 1024;
# }

# http {

#   client_max_body_size 20M;
#   upstream nodejs {
#     server node-app:3001;
#   }

#   upstream react {
#     server react-app:3000;
#   }

#   server {
#     listen 80;
#     server_name auto-canon.in www.auto-canon.in;
#     return 301 https://$host$request_uri; 
#   }

#   server {
#     listen 443 ssl;
#     server_name auto-canon.in www.auto-canon.in;

#     ssl_certificate /etc/letsencrypt/live/auto-canon.in/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/auto-canon.in/privkey.pem;

#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_prefer_server_ciphers on;
#     ssl_ciphers "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256";

#     location /api {
#       proxy_pass http://nodejs;
#       proxy_set_header Host $host;
#       proxy_set_header X-Real-IP $remote_addr;
#       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#       proxy_set_header X-Forwarded-Proto $scheme;

#     }

#     location / {
#       proxy_pass http://react;
#       proxy_set_header Host $host;
#       proxy_set_header X-Real-IP $remote_addr;
#       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#       proxy_set_header X-Forwarded-Proto $scheme;
#     }
#   }
# }
















# worker_processes 1;

# events {
#   worker_connections 1024;
# }

# http {

#   client_max_body_size 20M;
#   upstream nodejs {
#     server node-app:3001;
#   }

#   upstream react {
#     server react-app:3000;
#   }

#   server {
#     listen 80;
#     server_name bv-reg.com www.bv-reg.com;
#     return 301 https://$host$request_uri; 
#   }

#   server {
#     listen 443 ssl;
#     server_name bv-reg.com www.bv-reg.com;

#     ssl_certificate /etc/letsencrypt/live/bv-reg.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/bv-reg.com/privkey.pem;

#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_prefer_server_ciphers on;
#     ssl_ciphers "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256";

#     location /api {
#       proxy_pass http://nodejs;
#       proxy_set_header Host $host;
#       proxy_set_header X-Real-IP $remote_addr;
#       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#       proxy_set_header X-Forwarded-Proto $scheme;

#     }

#     location / {
#       proxy_pass http://react;
#       proxy_set_header Host $host;
#       proxy_set_header X-Real-IP $remote_addr;
#       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#       proxy_set_header X-Forwarded-Proto $scheme;
#     }
#   }
# }






worker_processes 1;

events {
    worker_connections 1024;
}

http {

    client_max_body_size 20M;  # Maximum allowed body size for client uploads

    upstream nodejs {
        server node-app:3001;  # Node.js API service
    }

    upstream react {
        server react-app:3000;  # React frontend service
    }

    # HTTP server block (for redirecting HTTP to HTTPS)
    server {
        listen 80;
        server_name bv-reg.com www.bv-reg.com;
        
        # Redirect all HTTP traffic to HTTPS
        return 301 https://$host$request_uri; 
    }

    # HTTPS server block (handles SSL connections)
    server {
        listen 443 ssl;
        server_name bv-reg.com www.bv-reg.com;

        # SSL Certificate configurations
        ssl_certificate /etc/letsencrypt/live/bv-reg.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/bv-reg.com/privkey.pem;

        ssl_protocols TLSv1.2 TLSv1.3;  # Enforce secure TLS versions
        ssl_prefer_server_ciphers on;  # Prefer server ciphers
        ssl_ciphers "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256";

        # Location block for the API
        location /api {
            proxy_pass http://nodejs;  # Proxy API requests to the Node.js backend
            proxy_set_header Host $host;  # Forward the original Host header
            proxy_set_header X-Real-IP $remote_addr;  # Forward the real client IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Forward the X-Forwarded-For header
            proxy_set_header X-Forwarded-Proto $scheme;  # Forward the protocol (http/https)
        }

        # Location block for the React app
        location / {
            proxy_pass http://react;  # Proxy frontend requests to the React app
            proxy_set_header Host $host;  # Forward the original Host header
            proxy_set_header X-Real-IP $remote_addr;  # Forward the real client IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Forward the X-Forwarded-For header
            proxy_set_header X-Forwarded-Proto $scheme;  # Forward the protocol (http/https)
        }
    }
}
